picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
MS0xNyAxMDozNzo0NCIscmV2aXNpb249Ml1dbHo0AH4AAAASMQAA8yF7WzBdPXtibXA9cHh1AEMg
EBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3gIAMt5PTAsem9vbT04fSw_AB-wMQD-----
-----------------------------------------------------------XUG09OH19
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTE5IDEzOjMyOjM1Iixtb2RpZmllZD0iMjAyNS0w
OC0xNSAxOTowNToyOCJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ4Iixtb2RpZmllZD0iMjAyNS0w
OC0xNSAxNzozNDo0NSIscmV2aXNpb249Ml1dbHo0AGgAAABYEAAA8Ah7e2JtcD11c2VyZGF0YSgi
aTE2IiwzMgMALyIwAQD--------------------78QgiKSxoaWRkZW49ZmFsc2UscGFuX3g9MAgA
0nk9MCx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTE5IDEzOjMyOjM1Iixtb2RpZmllZD0iMjAyNS0w
OC0xNSAxOTowNToyOCJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTAxLTE3IDEwOjM1OjQ5Iixtb2RpZmllZD0iMjAyNS0w
MS0xNyAxMDozNzo0NCIscmV2aXNpb249Ml1dbHo0AKAAAAALCgAA-zBweHUAAygAAAQABA9AEAIO
AAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-J6oBEAYP
IBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww8oD--wxg-4Cg--D4AP9w8NAfAJARAGDjAA------_9
H-8BAKzPyA9AAA8QQP--sPD-AQD-6lD-----KQ==
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTE5IDEzOjMyOjM1Iixtb2RpZmllZD0iMjAyNS0w
OC0xNSAxOTowNToyOCJdXQ==
:: main.lua
--[[pod_format="raw",created="2025-08-15 14:03:40",modified="2025-08-15 19:05:28",revision=1]]
-- Combined Lua Files for Picotron
-- Auto-generated by compile.sh

-- ==================== asteroids.lua ====================

-- Asteroid system

function init_asteroids()
    asteroids = {}
    asteroid_spawn_timer = 0
    asteroid_spawn_rate = 60
end

function update_asteroids()
    -- Update existing asteroids
    for asteroid in all(asteroids) do
        asteroid.y += asteroid.speed
        asteroid.x += asteroid.dx
        asteroid.rotation += asteroid.rot_speed
        
        if asteroid.y > 270 then
            del(asteroids, asteroid)
        end
    end
    
    -- Spawn new asteroids
    asteroid_spawn_timer += 1
    if asteroid_spawn_timer >= asteroid_spawn_rate then
        asteroid_spawn_timer = 0
        spawn_asteroid()
        
        -- Increase difficulty over time
        if asteroid_spawn_rate > 20 then
            asteroid_spawn_rate -= 0.5
        end
    end
end

function spawn_asteroid()
    add(asteroids, {
        x = rnd(460),
        y = -20,
        size = flr(rnd(3)) + 1,
        speed = rnd(2) + 1,
        dx = (rnd(2) - 1) * 0.5,  -- slight horizontal drift
        rotation = 0,
        rot_speed = (rnd(2) - 1) * 0.1,
        color = 8
    })
end

function draw_asteroids()
    for asteroid in all(asteroids) do
        local size = asteroid.size * 4
        local cx = asteroid.x + size
        local cy = asteroid.y + size
        
        -- Draw rotating asteroid as octagon
        local points = {}
        for i = 0, 7 do
            local angle = (i / 8) * 360 + asteroid.rotation
            local x = cx + cos(angle / 360) * size
            local y = cy + sin(angle / 360) * size
            add(points, {x = x, y = y})
        end
        
        -- Draw the asteroid shape
        for i = 1, #points do
            local next_i = (i % #points) + 1
            line(points[i].x, points[i].y, points[next_i].x, points[next_i].y, asteroid.color)
        end
    end
end

function get_asteroids()
    return asteroids
end

function remove_asteroid(asteroid)
    del(asteroids, asteroid)
end


-- ==================== background.lua ====================

-- Starry background system

function init_background()
    stars = {}
    for i = 1, 50 do
        add(stars, {
            x = rnd(480),
            y = rnd(270),
            speed = rnd(2) + 0.5,
            color = flr(rnd(3)) + 5
        })
    end
end

function update_background()
    for star in all(stars) do
        star.y += star.speed
        if star.y > 270 then
            star.y = 0
            star.x = rnd(480)
        end
    end
end

function draw_background()
    for star in all(stars) do
        pset(star.x, star.y, star.color)
    end
end


-- ==================== bullets.lua ====================

-- Bullet system

function init_bullets()
    bullets = {}
    bullet_speed = 8
end

function fire_bullet(x, y)
    add(bullets, {
        x = x,
        y = y,
        speed = bullet_speed
    })
end

function update_bullets()
    for bullet in all(bullets) do
        bullet.y -= bullet.speed
        if bullet.y < 0 then
            del(bullets, bullet)
        end
    end
end

function draw_bullets()
    for bullet in all(bullets) do
        circfill(bullet.x, bullet.y, 1, 10)
    end
end

function get_bullets()
    return bullets
end

function remove_bullet(bullet)
    del(bullets, bullet)
end


-- ==================== collision.lua ====================

-- Collision detection system

function collision_check(x1, y1, w1, h1, x2, y2, w2, h2)
    return x1 < x2 + w2 and x2 < x1 + w1 and y1 < y2 + h2 and y2 < y1 + h1
end

function check_all_collisions()
    local bullets = get_bullets()
    local asteroids = get_asteroids()
    local player = get_player()
    
    -- Bullet vs asteroid collisions
    for bullet in all(bullets) do
        for asteroid in all(asteroids) do
            if collision_check(bullet.x, bullet.y, 2, 2, 
                             asteroid.x, asteroid.y, asteroid.size * 8, asteroid.size * 8) then
                remove_bullet(bullet)
                remove_asteroid(asteroid)
                score += 10
                break
            end
        end
    end
    
    -- Player vs asteroid collisions
    for asteroid in all(asteroids) do
        if collision_check(player.x, player.y, player.w, player.h,
                         asteroid.x, asteroid.y, asteroid.size * 8, asteroid.size * 8) then
            remove_asteroid(asteroid)
            lives -= 1
        end
    end
end


-- ==================== main.lua ====================

-- Space Shooter Game - Main File

-- Include other modules

function _init()
    -- Game state
    game_state = "playing"
    score = 0
    lives = 3
    
    -- Initialize subsystems
    init_player()
    init_bullets()
    init_asteroids()
    init_background()
end

function _update()
    if game_state == "playing" then
        update_player()
        update_bullets()
        update_asteroids()
        update_background()
        check_all_collisions()
        
        if lives <= 0 then
            game_state = "game_over"
        end
    end
end

function _draw()
    cls(0)
    
    if game_state == "playing" then
        draw_background()
        draw_player()
        draw_bullets()
        draw_asteroids()
        draw_ui()
    elseif game_state == "game_over" then
        draw_game_over()
    end
end

function draw_ui()
    print("score: " .. score, 10, 10, 7)
    print("lives: " .. lives, 10, 20, 7)
end

function draw_game_over()
    cls(0)
    local text = "game over"
    local text_w = #text * 4
    print(text, (480 - text_w) / 2, 120, 8)
    
    local score_text = "final score: " .. score
    local score_w = #score_text * 4
    print(score_text, (480 - score_w) / 2, 140, 7)
    
    print("press z to restart", 180, 180, 6)
    
    if btnp(4) then
        _init()
    end
end


-- ==================== player.lua ====================

-- Player ship mechanics

function init_player()
    player = {
        x = 240,
        y = 400,
        w = 8,
        h = 8,
        speed = 3,
        color = 7
    }
end

function update_player()
    -- Movement
    if btn(0) then player.x -= player.speed end  -- left
    if btn(1) then player.x += player.speed end  -- right
    if btn(2) then player.y -= player.speed end  -- up
    if btn(3) then player.y += player.speed end  -- down
    
    -- Keep player on screen
    player.x = mid(0, player.x, 480 - player.w)
    player.y = mid(0, player.y, 270 - player.h)
    
    -- Shooting
    if btnp(4) then  -- z key
        fire_bullet(player.x + player.w/2, player.y)
    end
end

function draw_player()
    -- Draw simple triangle ship
    local cx = player.x + player.w/2
    local cy = player.y + player.h/2
    
    -- Triangle pointing up
    line(cx, player.y, cx - 4, player.y + 8, player.color)
    line(cx, player.y, cx + 4, player.y + 8, player.color)
    line(cx - 4, player.y + 8, cx + 4, player.y + 8, player.color)
end

function get_player()
    return player
end


:: .info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA3LTE5IDEzOjMyOjM1Iixtb2RpZmllZD0iMjAyNS0w
OC0xNSAxOTowNToyOCIscnVudGltZT0yMCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVh
IzMxMiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2Vf
aW5kZXg9Mn0se2xvY2F0aW9uPSJtYXAvMC5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9jYXRp
b249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9fV1d
:: [eoc]
