#!/bin/bash

# Picotron P64 Decompiler
# Extracts files from a Picotron cartridge (.p64 file) into separate files

set -e  # Exit on any error

# Configuration
INPUT_FILE="${1:-game.p64}"
OUTPUT_DIR="${2:-extracted}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if input file exists
if [ ! -f "$INPUT_FILE" ]; then
    log_error "Input file '$INPUT_FILE' not found!"
    echo "Usage: $0 [input.p64] [output_directory]"
    exit 1
fi

log_info "Picotron P64 Decompiler started..."
log_info "Input: $INPUT_FILE"
log_info "Output directory: $OUTPUT_DIR"

# Create output directory
if [ -d "$OUTPUT_DIR" ]; then
    log_warning "Output directory '$OUTPUT_DIR' already exists. Contents may be overwritten."
else
    mkdir -p "$OUTPUT_DIR"
    log_info "Created output directory: $OUTPUT_DIR"
fi

# Parse the P64 file
log_info "Parsing cartridge file..."

# Read the file and process it
current_section=""
current_file=""
in_file_content=false
file_count=0

while IFS= read -r line || [ -n "$line" ]; do
    # Check for section headers (:: filename)
    if [[ $line =~ ^::\ (.+)$ ]]; then
        current_section="${BASH_REMATCH[1]}"
        
        # Skip directory entries and .info.pod files for now
        if [[ $current_section == */ ]] || [[ $current_section == */.info.pod ]]; then
            in_file_content=false
            continue
        fi
        
        current_file="$OUTPUT_DIR/$current_section"
        in_file_content=true
        
        # Create directory if needed
        file_dir=$(dirname "$current_file")
        if [ ! -d "$file_dir" ]; then
            mkdir -p "$file_dir"
        fi
        
        log_info "Extracting: $current_section"
        
        # Initialize the file (empty it if it exists)
        > "$current_file"
        ((file_count++))
        continue
    fi
    
    # Check for base64 encoded content
    if [[ $line =~ ^b64\$ ]]; then
        if [ "$in_file_content" = true ] && [ -n "$current_file" ]; then
            # Extract base64 content and decode it
            b64_content="${line#b64$}"
            echo "$b64_content" | base64 -d >> "$current_file" 2>/dev/null || {
                log_warning "Failed to decode base64 content for $current_section"
            }
        fi
        continue
    fi
    
    # Check for end of cartridge marker
    if [[ $line =~ ^\[eoc\]$ ]]; then
        break
    fi
    
    # Regular content (like Lua code)
    if [ "$in_file_content" = true ] && [ -n "$current_file" ]; then
        echo "$line" >> "$current_file"
    fi
    
done < "$INPUT_FILE"

# Special handling for main.lua - split into individual files if it contains separators
if [ -f "$OUTPUT_DIR/main.lua" ]; then
    log_info "Analyzing main.lua for modular structure..."
    
    if grep -q "^-- ==================== .* ====================$" "$OUTPUT_DIR/main.lua"; then
        log_info "Found modular structure in main.lua, extracting individual files..."
        
        # Create a modules directory
        modules_dir="$OUTPUT_DIR/modules"
        mkdir -p "$modules_dir"
        
        # Split the main.lua file based on separators
        awk '
        BEGIN { 
            current_file = ""
            output_dir = "'"$modules_dir"'"
        }
        /^-- ==================== .* ====================/ {
            if (current_file != "") close(current_file)
            # Extract filename from separator line
            gsub(/^-- ==================== /, "")
            gsub(/ ====================.*$/, "")
            filename = $0
            current_file = output_dir "/" filename
            print "Extracting module: " filename > "/dev/stderr"
            next
        }
        current_file != "" && !/^-- Combined Lua Files for Picotron/ && !/^-- Auto-generated by compile.sh/ && $0 != "" {
            print > current_file
        }
        END {
            if (current_file != "") close(current_file)
        }
        ' "$OUTPUT_DIR/main.lua"
        
        # Count extracted modules
        module_count=$(find "$modules_dir" -name "*.lua" 2>/dev/null | wc -l)
        if [ $module_count -gt 0 ]; then
            log_success "Extracted $module_count Lua modules to $modules_dir/"
            ((file_count += module_count))
        fi
    fi
fi

# Generate summary
log_success "Decompilation complete!"
echo ""
echo "======================== SUMMARY ========================"
echo "Input file: $INPUT_FILE"
echo "Output directory: $OUTPUT_DIR"
echo "Files extracted: $file_count"
echo "========================================================"
echo ""

# List extracted files
if [ $file_count -gt 0 ]; then
    echo "Extracted files:"
    find "$OUTPUT_DIR" -type f | sort | while read -r file; do
        relative_path=${file#$OUTPUT_DIR/}
        file_size=$(wc -c < "$file")
        echo "  - $relative_path ($file_size bytes)"
    done
    echo ""
    echo "Files are ready for editing and recompilation!"
else
    log_warning "No files were extracted. The cartridge may have an unsupported format."
fi